Minimizing Permutations
    In this problem, you are given an integer N, and a permutation, P of the integers from 1 to N, denoted as (a_1, a_2, ..., a_N). You want to rearrange the elements of the permutation into increasing order, repeatedly making the following operation:

    Select a sub-portion of the permutation, (a_i, ..., a_j), and reverse its order.
    Your goal is to compute the minimum number of such operations required to return the permutation to increasing order.

    Signature
    int minOperations(int[] arr)

    Input
    Array arr is a permutation of all integers from 1 to N, N is between 1 and 8

    Output
    An integer denoting the minimum number of operations required to arrange the permutation in increasing order

    Example
    If N = 3, and P = (3, 1, 2), we can do the following operations:
    Select (1, 2) and reverse it: P = (3, 2, 1).
    Select (3, 2, 1) and reverse it: P = (1, 2, 3).
    output = 2

My Thoughts:

Starting out, no idea how to approach -- at least through graphs
I remember from linear algebra that any permutation can be reduced to a series of pair-wise permutations (I think)

We can look at some simple examples

With 2 elements, the problem is trivial:

2,1 => 1,2 in 1 permutation

With 3 elements we have the following possible problems

1,2,3 (solved)
1,3,2 => 1,2,3 (1 permutation of 3,2)
    note: we could have done this in more
        3,1,2 (put 1 next to 2)
        1,3,2 (get 3 to the end but oops, we're back where we started aren't we)
        1,2,3
    so this gives us the idea of a permutation going back to where we started
        could we think of the intermediates along the way as nodes? **
2,1,3
2,3,1
3,1,2
3,2,1

** So let's follow that thought of intermediate permutations being nodes, where we can get from one permutation to another through a series of intermediates -- then it's clear if we build a graph mapping all the permutations, we can find the shortest path!

Then we would need an algorithm to blindly generate a graph for a given set of all permutations, take the permutation we're given as our source, and find the path to the destination using BFS (which can be used to find the shortest path)

But how do we even generate the graph?

Potential complication -- you are able to reverse more than just 2 digits (this would increase the number of links between graphs -- makes implementation a headache)

https://en.wikipedia.org/wiki/Permutation_graph -- interesting resource (from https://stackoverflow.com/questions/9567992/constructing-a-permutation-graph) -- but not sure how much help it will be

originally I was entertaining what I think is a dynamic programming idea, where for N, if you know you can get N-1 through an inversion, you would know that you can get N in 1 + 1 (the inversion for N-1 and then an additional permutation) -- but that can't be quite right, as it's possible when you add N that there's an additional shortest path (by inverting all N)

    thinking about the above, look at 1,2 and 1,2,3
    you can get from 1,2 to 2,1 -- that is an inversion and in fact the only permutation
    in 1,2,3 you can use that to get to 2,1,3
        but now there are additional permutations possible
        3,2,1 is a complete inversion
        1,3,2 is an additional sub-inversion
            this gives you 2,3,1
        so it seems like adding an additional element opens up a number of new paths, not just one more path
            i.e. there's no clear relationship between the number of paths for N-1 and N
            this makes sense, because we know the number of permutations for N is N!
            so when you add a new element from N-1 to N, there are N(N-1) permutations I think

building this graph brute force gives you N^2 things to look at -- get ALL the permutations, then check for each permutation whether another can be derived from it by inversion (but this check is not trivial and would probably involve more work)

looks like a solution is here: https://www.geeksforgeeks.org/minimum-number-of-prefix-reversals-to-sort-permutation-of-first-n-numbers/
might be helpful to just work through this

sub-problem -- generate all permutations from a given string
    then we generate all permutations from those permutations
    we keep a hash-table of permutations we have generated so far and stop when we generate nothing that isn't in the hashtable